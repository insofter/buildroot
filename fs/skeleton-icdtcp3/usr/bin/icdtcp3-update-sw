#!/bin/sh

print_info()
{
  echo "${program_name}: $1" >&2
}

print_error()
{
  echo "${program_name}: Error! $1" >&2
}

warn_on_error()
{
  if [ $? -ne 0 ]; then
    print_error "$1"
  fi
}

exit_on_error()
{
  if [ $? -ne 0 ]; then
    print_error "$1"
    echo "Program halted" >2
    exit 1
  fi
}

print_usage()
{
  echo ""
  echo "Usage: ${program_name} [ [-a|--vol-a|-b|--vol-b|-n|--next] [-f--force] FILE]"
  echo "  [-h|--help] [-v|--version]"
  echo ""
  echo "With no parameters the tool prints the current boot volume (a or b)."
  echo "More precisely 'a' corresponds to the pair uImage-a and rootfs-a"
  echo "and 'b' corresponds to the pair uImage-b rootfs-b of ubi volumes."
  echo "With FILE parameter provided the tool does the update."
  echo ""
  echo "  -a|--vol-a      Update volume pair a"
  echo "  -b|--vol-b      Update volume pair b"
  echo "  -n|--next       Update the other volume and boot from it"
  echo "  -f|--force      Do not validate update version"
  echo "  -h|--help       show this information"
  echo "  -v|--version    show version information"
  echo ""
}

print_version()
{
  echo "${PROGRAM_NAME} 1.0"
  echo "Copyright (c) 2011-2012 Tomasz Rozensztrauch"
}

get_ubi_dev()
{
  local vol_id vol_name
  vol_name="$1"
  vol_id="`ubinfo /dev/ubi0 -N ${vol_name} | sed -n -e \
    's/^Volume ID:[[:space:]]*\([[:digit:]]*\).*$/\1/p'`"
  test "x${vol_id}" == "x" && return 1
  echo "/dev/ubi0_${vol_id}"
}

#
# update_ubi_vol()
#  $1 ubi_boot_vol
#  $2 update_file
#  $3 header
#  $4 image_name
#
update_ubi_vol()
{
  local ubi_boot_vol update_file header image_name
  local ubi_dev image_size image_compression decompressor

  ubi_boot_vol=$1
  update_file=$2
  header=$3
  image_name=$4

  # First, get the device (e.g /dev/ubi0_1) asociated with
  # the volume ${image_name} suffixed with ${ubi_boot_vol} ("a" or "b")
  print_info "Updating ${image_name}-${ubi_boot_vol}"
  ubi_dev=`get_ubi_dev "${image_name}-${ubi_boot_vol}"`
  if [ $? -ne 0 ]; then
    print_error "Obtaining device for volume \
      ${image_name}-${ubi_boot_vol} failed"
    return 1
  fi

  # Get image to update with and its metadata
  image_file=`echo "${header}" | \
    sed -n -e 's/^'"${image_name}"'=\(.*\)$/\1/p'`

  image_size=`echo "${header}" | \
    sed -n -e 's/^'"${image_name}"'-size=\(.*\)$/\1/p'`

  image_compression=`echo "${header}" | \
    sed -n -e 's/^'"${image_name}"'-compression=\(.*\)$/\1/p'`
  print_info "image: ${image_file} (size: ${image_size}, compression: ${image_compression})"

  # Figure out what decompression tool to use
  case "${image_compression}" in
    none) decompressor="cut -" ;;
    gzip) decompressor="gunzip" ;;
    bzip2) decompressor="bunzip2" ;;
    lzma) decompressor="unlzma" ;;
    *) print_error "Invalid or unsupported compression: \
         ${image_compression}"; return 1 ;;
  esac

  # Extract image, uncompress and update the volume with it
  tar -x ${image_file} -f ${update_file} -O | ${decompressor} | \
    ubiupdatevol "${ubi_dev}" -s "${image_size}" -
  if [ $? -ne 0 ]; then
    print_error "Updating ${ubi_dev} failed"
    return 1
  fi

  return 0
}

# check_version()
#  $1 curr_version
#  $2 version
check_version()
{
  local curr_version version
  curr_version="$1"
  version="$2"

  version_major=`echo "${version}" | cut -d. -f 1`
  version_minor=`echo "${version}" | cut -d. -f 2`
  version_patch=`echo "${version}" | cut -d. -f 3`
  version_full=`printf "%02d%02d%02d" "${version_major}" \
    "${version_minor}" "${version_patch}"`

  curr_version_major=`echo "${version}" | cut -d. -f 1`
  curr_version_minor=`echo "${version}" | cut -d. -f 2`
  curr_version_patch=`echo "${version}" | cut -d. -f 3`
  curr_version_full=`printf "%02d%02d%02d" "${version_major}" \
    "${version_minor}" "${version_patch}"`

  test "${version_full}" -gt "${curr_version_full}" && return 0 || return 1
}

program_name=`basename "$0"`

bootcfg_dev=`get_ubi_dev "bootcfg"`
exit_on_error "Obtaining device for volume bootcfg failed"

bootcfg_aux_dev=`get_ubi_dev "bootcfg-aux"`
exit_on_error "Obtaining device for volume bootcfg-aux failed"

curr_boot_vol=`cat "${bootcfg_dev}" | cut -d = -f 2`
test "x${curr_boot_vol}" != "x" 
exit_on_error "Obtaining current ubi boot volume failed"

next_boot_vol=`test "${curr_boot_vol}" == "a" && echo "b" || echo "a"`

# By default update the other volume 
ubi_boot_vol="${next_boot_vol}" 

# By default run version check
version_check="yes"

options=`getopt -o abnfhv --long vol-a,vol-b,next,force,help,version -- "$@"`
eval set -- "$options"
while true ; do
  case "$1" in
    -a|--vol-a) ubi_boot_vol="a"; shift 1 ;;
    -b|--vol-b) ubi_boot_vol="b"; shift 1 ;;
    -n|--next)  ubi_boot_vol="${next_boot_vol}"; shift 1 ;;
    -f|--force) version_check="no"; shift 1 ;;
    -h|--help) print_usage; exit 0 ;;
    -v|--version) print_version; exit 0 ;;
    --) shift; break ;;
    *) print_info "Internal error! $1"; exit 1 ;;
  esac
done

update_file="$1"

print_info "Current boot volume: ${curr_boot_vol}"

curr_version=`cat "/etc/icdtcp3-version"`
print_info "Current version: ${curr_version}"

if [ "x${update_file}" != "x" ]; then
  header=`tar -x header -f ${update_file} -O`
  exit_on_error "Extracting update header failed"

  version=`echo "${header}" | sed -n -e 's/^version=\(.*\)$/\1/p'`
  print_info "Version from ${update_file}: ${version}"

  if [ "${version_check}" == "yes" ]; then
    check_version "${curr_version}" "${version}"
    exit_on_error "Version validation failed. Too old or incorrect update version"
  fi

  update_ubi_vol "${ubi_boot_vol}" "${update_file}" "${header}" "uImage"
  exit_on_error "Updating uImage-${ubi_boot_vol} volume failed"

  update_ubi_vol "${ubi_boot_vol}" "${update_file}" "${header}" "rootfs"
  exit_on_error "Updating rootfs-${ubi_boot_vol} volume failed"

  print_info "Setting ubi boot volume to: ${ubi_boot_vol}"
  printf "ubi-boot-vol=${ubi_boot_vol}\n\0" \
    | ubiupdatevol ${bootcfg_aux_dev} -s 16 -
  exit_on_error "Updating ${bootcfg_aux_dev} failed"

  ubirename /dev/ubi0 bootcfg bootcfg-aux bootcfg-aux bootcfg
  exit_on_error "Swaping bootcfg and bootcfg-aux volumes failed."
fi

exit 0
